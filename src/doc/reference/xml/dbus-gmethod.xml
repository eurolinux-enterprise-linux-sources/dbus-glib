<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY dbus-binding-tool SYSTEM "dbus-binding-tool.xml">
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="dbus-glib-DBusGMethod">
<refmeta>
<refentrytitle role="top_of_page" id="dbus-glib-DBusGMethod.top_of_page">DBusGMethod</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>DBUS-GLIB Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>DBusGMethod</refname>
<refpurpose>GMethod Info &amp; Invocation</refpurpose>
</refnamediv>
<refsect1 id="dbus-glib-DBusGMethod.stability-level">
<title>Stability Level</title>
Stable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="dbus-glib-DBusGMethod.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="DBusGMethodInfo">DBusGMethodInfo</link>;
                    <link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link>;
<link linkend="gchar">gchar</link>*              <link linkend="dbus-g-method-get-sender">dbus_g_method_get_sender</link>            (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="DBusMessage">DBusMessage</link>*        <link linkend="dbus-g-method-get-reply">dbus_g_method_get_reply</link>             (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);
<link linkend="void">void</link>                <link linkend="dbus-g-method-send-reply">dbus_g_method_send_reply</link>            (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="DBusMessage">DBusMessage</link> *reply);
<link linkend="void">void</link>                <link linkend="dbus-g-method-return">dbus_g_method_return</link>                (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         ...);
<link linkend="void">void</link>                <link linkend="dbus-g-method-return-error">dbus_g_method_return_error</link>          (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GError">GError</link> *error);
</synopsis>
</refsynopsisdiv>









<refsect1 id="dbus-glib-DBusGMethod.description" role="desc">
<title role="desc.title">Description</title>
<para>
These types are used to call methods on <link linkend="GObject"><type>GObject</type></link> objects.</para>
<para>
</para>
</refsect1>

<refsect1 id="dbus-glib-DBusGMethod.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="DBusGMethodInfo" role="struct">
<title>DBusGMethodInfo</title>
<indexterm zone="DBusGMethodInfo"><primary sortas="DBusGMethodInfo">DBusGMethodInfo</primary></indexterm><programlisting>typedef struct {
  GCallback                 function;    
  GClosureMarshal           marshaller;  
  int                       data_offset; 
} DBusGMethodInfo;
</programlisting>
<para>
Object typically generated by <link linkend="dbus-binding-tool"><type>dbus-binding-tool</type></link> that
stores a mapping from introspection data to a
function pointer for a C method to be invoked.</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="GCallback">GCallback</link>&#160;<structfield>function</structfield>;</term>
<listitem><simpara> C method to invoke
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GClosureMarshal">GClosureMarshal</link>&#160;<structfield>marshaller</structfield>;</term>
<listitem><simpara> Marshaller to invoke method 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="int">int</link>&#160;<structfield>data_offset</structfield>;</term>
<listitem><simpara> Offset into the introspection data
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="DBusGMethodInvocation" role="struct">
<title>DBusGMethodInvocation</title>
<indexterm zone="DBusGMethodInvocation"><primary sortas="DBusGMethodInvocation">DBusGMethodInvocation</primary></indexterm><programlisting>typedef struct _DBusGMethodInvocation DBusGMethodInvocation;</programlisting>
<para>
</para></refsect2>
<refsect2 id="dbus-g-method-get-sender" role="function">
<title>dbus_g_method_get_sender ()</title>
<indexterm zone="dbus-g-method-get-sender"><primary sortas="dbus_g_method_get_sender">dbus_g_method_get_sender</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              dbus_g_method_get_sender            (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Get the sender of a message so we can send a
"reply" later (i.e. send a message directly
to a service which invoked the method at a
later time).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> the method context
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the unique name of the sender. It
is up to the caller to free the returned string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="dbus-g-method-get-reply" role="function">
<title>dbus_g_method_get_reply ()</title>
<indexterm zone="dbus-g-method-get-reply"><primary sortas="dbus_g_method_get_reply">dbus_g_method_get_reply</primary></indexterm><programlisting><link linkend="DBusMessage">DBusMessage</link>*        dbus_g_method_get_reply             (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context);</programlisting>
<para>
Get the reply message to append reply values
Used as a sidedoor when you can't generate dbus values
of the correct type due to glib binding limitations</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> the method context
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="DBusMessage"><type>DBusMessage</type></link> with the reply
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="dbus-g-method-send-reply" role="function">
<title>dbus_g_method_send_reply ()</title>
<indexterm zone="dbus-g-method-send-reply"><primary sortas="dbus_g_method_send_reply">dbus_g_method_send_reply</primary></indexterm><programlisting><link linkend="void">void</link>                dbus_g_method_send_reply            (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         <link linkend="DBusMessage">DBusMessage</link> *reply);</programlisting>
<para>
Used as a sidedoor when you can't generate dbus values
of the correct type due to glib binding limitations</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> the method context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reply</parameter>&#160;:</term>
<listitem><simpara> the reply message, will be unreffed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="dbus-g-method-return" role="function">
<title>dbus_g_method_return ()</title>
<indexterm zone="dbus-g-method-return"><primary sortas="dbus_g_method_return">dbus_g_method_return</primary></indexterm><programlisting><link linkend="void">void</link>                dbus_g_method_return                (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         ...);</programlisting>
<para>
Send a return message for a given method invocation, with arguments.
This function also frees the sending context.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> the method context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="dbus-g-method-return-error" role="function">
<title>dbus_g_method_return_error ()</title>
<indexterm zone="dbus-g-method-return-error"><primary sortas="dbus_g_method_return_error">dbus_g_method_return_error</primary></indexterm><programlisting><link linkend="void">void</link>                dbus_g_method_return_error          (<link linkend="DBusGMethodInvocation">DBusGMethodInvocation</link> *context,
                                                         const <link linkend="GError">GError</link> *error);</programlisting>
<para>
Send a error message for a given method invocation.
This function also frees the sending context.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> the method context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> the error to send
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="dbus-glib-DBusGMethod.see-also">
<title>See Also</title>
#DBusGMessage
</refsect1>

</refentry>
